name: Release

on:
  push:
    tags:
      - 'v*'  # 触发条件：推送以 v 开头的标签，如 v1.0.0

# 设置工作流权限
permissions:
  contents: write
  pull-requests: read

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        # 构建多个平台的二进制文件
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-${{ matrix.goos }}-${{ matrix.goarch }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.goos }}-${{ matrix.goarch }}-go-
          ${{ runner.os }}-go-
        
    - name: Get dependencies
      run: go mod download

    - name: Verify required files
      run: |
        # 检查嵌入模板所需的文件
        echo "🔍 检查必要文件..."
        for file in main.go embed.go views/version/index.html views/auth/login.html config.yaml README.md; do
          if [[ ! -f "$file" ]]; then
            echo "❌ 缺少必要文件: $file"
            exit 1
          fi
          echo "✅ 找到: $file"
        done

    - name: Build binary with embedded templates
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        # 获取构建信息
        BUILD_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        GIT_COMMIT=$(git rev-parse --short HEAD)
        VERSION=${{ github.ref_name }}
        
        echo "🔨 构建 ${VERSION} for ${{ matrix.goos }}/${{ matrix.goarch }} (嵌入模板)"
        
        # 构建二进制文件（嵌入模板）
        LDFLAGS="-s -w -X 'main.Version=${VERSION}' -X 'main.BuildTime=${BUILD_TIME}' -X 'main.GitCommit=${GIT_COMMIT}'"
        
        # 创建部署说明文件
        cat > DEPLOY.md << 'EOF'
        # Gover 部署说明

        ## 快速部署

        1. 解压文件：
           ```bash
           tar -xzf gover-*.tar.gz  # Linux/macOS
           unzip gover-*.zip        # Windows
           cd gover-*
           ```

        2. 复制配置文件：
           ```bash
           cp config.yaml.example config.yaml
           ```

        3. 编辑配置文件：
           ```bash
           vim config.yaml  # Linux/macOS
           notepad config.yaml  # Windows
           ```

        4. 运行应用：
           ```bash
           ./gover          # Linux/macOS
           gover.exe        # Windows
           ```

        ## 模板文件

        此版本已将模板文件嵌入到二进制文件中，无需额外的 views 目录。

        ## 性能选项

        - 默认模式: `./gover`
        - 快速模式: `./gover --fast --skip-fetch`
        - 调试模式: `./gover --debug`

        ## 权限问题

        如果遇到 Git 权限问题，运行：
        ```bash
        ./gover --fix-git
        ```

        ## 服务模式 (Linux)

        ```bash
        # 创建 systemd 服务
        sudo tee /etc/systemd/system/gover.service > /dev/null << EOL
        [Unit]
        Description=Gover Git Version Manager
        After=network.target

        [Service]
        Type=simple
        User=www-data
        WorkingDirectory=/path/to/gover
        ExecStart=/path/to/gover/gover --fast
        Restart=always
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOL

        # 启用并启动服务
        sudo systemctl enable gover
        sudo systemctl start gover
        ```
        EOF
        
        if [ "${{ matrix.goos }}" = "windows" ]; then
          # Windows: 构建 .exe 文件
          go build -ldflags "${LDFLAGS}" -o gover.exe .
          
          # 创建发布包（只包含必要文件，不包含 views 目录）
          cp config.yaml config.yaml.example
          zip -r gover-${{ github.ref_name }}-${{ matrix.suffix }}.zip \
            gover.exe \
            config.yaml.example \
            README.md \
            DEPLOY.md
            
          echo "✅ Windows 包创建完成: gover-${{ github.ref_name }}-${{ matrix.suffix }}.zip"
        else
          # Linux/macOS: 构建无后缀文件
          go build -ldflags "${LDFLAGS}" -o gover .
          
          # 创建发布包（只包含必要文件，不包含 views 目录）
          cp config.yaml config.yaml.example
          tar -czf gover-${{ github.ref_name }}-${{ matrix.suffix }}.tar.gz \
            gover \
            config.yaml.example \
            README.md \
            DEPLOY.md
            
          echo "✅ Unix 包创建完成: gover-${{ github.ref_name }}-${{ matrix.suffix }}.tar.gz"
        fi
        
        # 显示构建结果
        if [ "${{ matrix.goos }}" = "windows" ]; then
          ls -lh gover.exe gover-${{ github.ref_name }}-${{ matrix.suffix }}.zip
        else
          ls -lh gover gover-${{ github.ref_name }}-${{ matrix.suffix }}.tar.gz
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gover-${{ matrix.suffix }}
        path: |
          gover-${{ github.ref_name }}-${{ matrix.suffix }}.*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate release notes
      id: release_notes
      run: |
        # 生成发布说明
        cat > release_notes.md << 'EOF'
        ## 🚀 Gover ${{ steps.version.outputs.VERSION }} 发布

        ### 📦 下载说明
        
        请根据您的操作系统选择对应的版本：
        
        - **Linux AMD64**: `gover-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz`
        - **Linux ARM64**: `gover-${{ steps.version.outputs.VERSION }}-linux-arm64.tar.gz`
        - **macOS Intel**: `gover-${{ steps.version.outputs.VERSION }}-darwin-amd64.tar.gz`
        - **macOS Apple Silicon**: `gover-${{ steps.version.outputs.VERSION }}-darwin-arm64.tar.gz`

        ### 🛠️ 安装方法

        1. 下载对应平台的压缩包
        2. 解压到目标目录：
           ```bash
           tar -xzf gover-*.tar.gz  # Linux/macOS
           ```
        3. 复制配置文件：
           ```bash
           cp config.yaml.example config.yaml
           ```
        4. 编辑配置文件并运行：
           ```bash
           ./gover          # Linux/macOS
           ```

        ### 📝 使用说明

        详细的配置和使用说明请参考项目 README.md 和 DEPLOY.md 文件。

        ### ⚡ 性能选项

        - **默认模式**: `./gover`
        - **快速模式**: `./gover --fast --skip-fetch` (推荐生产环境)
        - **调试模式**: `./gover --debug`

        ### 🔧 技术特性

        - 🏷️ 智能版本排序
        - 🔄 一键版本回滚
        - 📁 多项目管理  
        - 🔐 安全认证系统
        - 📱 响应式界面
        - 🌐 现代化 Web UI
        - 📦 **模板文件嵌入** (无需额外文件)
        - ⚡ **缓存优化** (快速响应)
        - 🚀 **零依赖部署** (单二进制文件)

        ---
        
        **完整更新日志请查看项目提交历史。**
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: "Gover ${{ steps.version.outputs.VERSION }}"
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          ./artifacts/*/gover-${{ steps.version.outputs.VERSION }}-*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload to latest release
      if: ${{ !contains(steps.version.outputs.VERSION, 'beta') && !contains(steps.version.outputs.VERSION, 'alpha') && !contains(steps.version.outputs.VERSION, 'rc') }}
      run: |
        echo "正式版本已发布: ${{ steps.version.outputs.VERSION }}" 